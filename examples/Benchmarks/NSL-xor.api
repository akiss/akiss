(*
  Needham-Schroeder-Lowe asymmetric protocol
    A -> B: {A,nA,r1}_pkB
    B -> A: {B,nA,nB,r2}_pkA
    A -> B: {nB,r3}_pkB
*)

free a,b,c.
free s1,s2,yes,no.
free kc.

chan ca, cb, cd.

fun pk/1.
fun aenc/3.
fun adec/2.
adec( aenc(m,r,pk(k)), k) -> m.

// Alice
let A(ch,ida,idb,ka,pkb,end) =
  new na;
  new r1;
  new r3;
  out(ch,aenc((ida,na),r1,pkb));
  in(ch,xenc);
  let (idbna,x3) = adec(xenc,ka) in
  if idbna = idb + na then
  out(ch, aenc(x3,r3,pkb)).

// Bob
let B(ch,idb,ida,kb,pka,n,e) =
  new r2;
  in(ch,z);
  let (=a,z2) = adec(z,kb) in
  out(ch,aenc((idb + z2,n),r2,pka));
  in(ch,x);
  out(ch,e).

let Scenario (s,e) =
  new ka; new kb;
  out(cd,pk(ka));
  out(cd,pk(kb));
  (
    A(ca,a,b,ka,pk(kb),e) | B(cb,b,a,kb,pk(ka),s,e) 
  ).
    

let P = Scenario(s1,yes).
let Q = Scenario(s2,no).


query trace_equiv(P,Q).
