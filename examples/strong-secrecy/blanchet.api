// This is a variant of the Denning-Sacco protocol introduced by Bruno Blanchet
// in his paper 'Automatic Proof of Strong Secrecy for Security Protocols'.
// 
// Informal description of the protocol :
//
// 	1. A -> B : {[<pkA,<pkB,k>>]skA}pkB   (k fresh)
//	2. B -> A : {z}_k
//
// The protocol is shown to respect strong secrecy of z.
//

symbols enc/2, dec/2, aenc/2, adec/2, pk/1, sign/2, ok/0, msg/1, check/2, pair/2, fst/1, snd/1, n1/0, n2/0, n3/0; 

channels c, cab, cba;

private ekB, skA, k;

var X, Y, Z1, Z2;

rewrite fst(pair(X, Y)) -> X;
rewrite snd(pair(X, Y)) -> Y;

rewrite adec(aenc(X, pk(Y)), Y) -> X;
rewrite dec(enc(X, Y), Y) -> X;
rewrite check(sign(X,Y),pk(Y)) -> ok;
rewrite msg(sign(X,Y)) -> X;


// Setup : publish public keys and input values for strong secrecy of vars Z1, Z2
Setup = out(c, pk(skA)).out(c, pk(ekB)).in(c, Z1).in(c, Z2).0;

// Role A
A = out(cab, aenc(sign(pair(pk(skA),pair(pk(ekB),k)),skA),pk(ekB))).0;


// Role B using either Z1 or Z2
B1 = in(cab, X).
     [check(adec(X,ekB),pk(skA)) = ok].
     [fst(msg(adec(X,ekB))) = pk(skA)].
     [fst(snd(msg(adec(X,ekB)))) = pk(ekB)].
     out(cba, enc(Z1,snd(snd(msg(adec(X,ekB)))))).0;

B2 = in(cab, X).
     [check(adec(X,ekB),pk(skA)) = ok].
     [fst(msg(adec(X,ekB))) = pk(skA)].
     [fst(snd(msg(adec(X,ekB)))) = pk(ekB)].
     out(cba, enc(Z2,snd(snd(msg(adec(X,ekB)))))).0;

// Computing the interleavings of the 2 roles
I1 = A || B1;
I2 = A || B2;


P = Setup :: I1;
Q = Setup :: I2;

equivalentct? P and Q;