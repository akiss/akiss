// This is a second variant of the Denning-Sacco protocol introduced by Bruno Blanchet
// in his paper 'Automatic Proof of Strong Secrecy for Security Protocols'.
// 
// Informal description of the protocol :
//
// 	1. A -> B : <{[<pkA,<pkB,k>>]skA}pkB, {sa}k>   (k fresh)
//	2. B -> A : {sb}_k
//
// The protocol does respect real-or-random secrecy of sa and sb 
//

symbols enc/2, dec/2, aenc/2, adec/2, pk/1, sign/2, ok/0, msg/1, check/2, pair/2, fst/1, snd/1, n1/0, n2/0, n3/0; 

channels c,cab,cba;

private ekB, skA, k, sa, sb, ra, rb;

var X, Y, Za1, Za2, Zb1, Zb2;

rewrite fst(pair(X, Y)) -> X;
rewrite snd(pair(X, Y)) -> Y;

rewrite adec(aenc(X, pk(Y)), Y) -> X;
rewrite dec(enc(X, Y), Y) -> X;
rewrite check(sign(X,Y),pk(Y)) -> ok;
rewrite msg(sign(X,Y)) -> X;


// Setup: publish public keys
Setup = out(c, pk(skA)).out(c, pk(ekB)).0;

// Role A using either Za1 or Za2
A = out(cab, pair(aenc(sign(pair(pk(skA),pair(pk(ekB),k)),skA),pk(ekB)),enc(sa,k))).0;


// Role B using either Zb1 or Zb2
B = in(cab, X).
    [check(adec(fst(X),ekB),pk(skA)) = ok].
    [fst(msg(adec(fst(X),ekB))) = pk(skA)].
    [fst(snd(msg(adec(fst(X),ekB)))) = pk(ekB)].
    out(cba, enc(sb,snd(snd(msg(adec(fst(X),ekB)))))).0;


// Computing the interleavings of the 2 roles
I = A || B;


// Outputting either real or random secrets
Real = out(c,sa).out(c,sb).0;
Random = out(c,ra).out(c,rb).0;

P = Setup :: I >> Real;
Q = Setup :: I >> Random;

includedft? P in Q;
