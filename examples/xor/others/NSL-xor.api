// NSL with xor
// A -> B: aenc(<na,A>,pub(B))
// B -> A: aenc(<na+B,nb>,pub(A))
// A -> B: aenc(nb,pub(B))

// Well-known attack
//  A --> I: aenc(<na,A>,pub(I))
// I(A) --> B: aenc(<na + B + I,A>,pub(B))
// B --> : aenc(<na+I,nb>,pub(A))
// I --> A : aenc(<na+I,nb>,pub(A))
// A --> I: aenc(nb,pub(I))
//I(A) --> B: aenc(nb,pub(B))

#set xor;

symbols aenc/3, adec/2, pub/1, h/1, pair/2, fst/1, snd/1, i/0;
private na, nb, a, b, r1, r2, r3;
channels C1, C2;
var X,Y,Z;

rewrite adec(aenc(X,pub(Y),Z),Y) -> X;
rewrite fst(pair(X,Y)) -> X;
rewrite snd(pair(X,Y)) -> Y;


Tinit = out(C1,pub(a)).out(C1,pub(b)).0;

RoleAI = out(C1,aenc(pair(na,pub(a)),pub(i),r1)).
  in(C1,X).
  [fst(adec(X,a))+pub(i) = na].
  out(C1,aenc(snd(adec(X,a)),pub(i),r3)).0;

RoleBA =
  in(C2,Y).[snd(adec(Y,b)) = pub(a)].
  out(C2,aenc(pair(fst(adec(Y,b))+pub(b),nb),snd(adec(Y,b)),r2)).
  in(C2,Z).[adec(Z,b)=nb].0;

P = Tinit :: ( RoleAI || (RoleBA :: out(C2,0)));
Q = Tinit :: ( RoleAI || RoleBA);

// print_traces P;

not includedct? P in Q;
