#set xor;

symbols aenc/3, adec/2, pub/1, h/1, pair/2, fst/1, snd/1;
private na, a, b, r1, r2, r3;
channels C1, C2;
var X,Y,Z, nb, Xleft, Xright;

rewrite adec(aenc(X,pub(Y),Z),Y) -> X;
rewrite fst(pair(X,Y)) -> X;
rewrite snd(pair(X,Y)) -> Y;


Tinit = out(C1,pub(a)).out(C1,pub(b)).in(C2,Xleft).in(C2,Xright).0;

RoleAB = out(C1,aenc(pair(na,pub(a)),pub(b),r1)).
  in(C1,X).
  [fst(adec(X,a))+pub(b) = na].
  out(C1,aenc(snd(adec(X,a)),pub(b),r3)).0;


RoleBA =
  in(C2,Y).[snd(adec(Y,b)) = pub(a)].
  out(C2,aenc(pair(fst(adec(Y,b))+pub(b),nb),snd(adec(Y,b)),r2)).
  in(C2,Z).[adec(Z,b)=nb].out(C2,0);


P = Tinit :: ( RoleAB || let nb = Xleft  in RoleBA);
Q = Tinit :: ( RoleAB || let nb = Xright in RoleBA);

// print_traces P;

equivalentct? P and Q;
