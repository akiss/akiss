// API IBM

#set xor;

symbols enc/2, dec/2, data/0, imp/0, exp/0, kp/0, pin/0, kp3/0, pan/0;
private km, pdk, kp1, kp2;
channels C;
var X, Y, Xp, Xkek, X1, X2, Y1, Y2, Y3, Z1, Z2, Z3, Z;

rewrite dec(enc(X, Y), Y) -> X;

Encipher = in(C,X1).in(C,X2).out(C,enc(X1,dec(X2,km + data))).0;


 KeyImport = in(C,Y1).in(C,Y2).in(C,Y3).out(C,enc(dec(Y1, Y2 + dec(Y3, km + imp)), km + Y2)).0;

 KeyPartImport3 = in(C,Z1).in(C,Z2).in(C,Z3).out(C,enc(Z1 + dec(Z3, km + Z2 + kp),  km + Z2)).0;


P1 =  let Xp = enc(kp1 + kp2, km + imp + kp) in out(C, Xp). let Xkek = kp1 + kp2 + kp3 in out(C, enc(pdk, Xkek + pin)).
     	 (KeyPartImport3 ::KeyImport)::in(C,X).[X = enc(pan,pdk)].in(C,Z);

P2=  let Xp = enc(kp1 + kp2, km + imp + kp) in out(C, Xp). let Xkek = kp1 + kp2 + kp3 in out(C, enc(pdk, Xkek + pin)).
     	 (KeyPartImport3 ::KeyImport):: in(C,X);

includedct? P1 in P2;
