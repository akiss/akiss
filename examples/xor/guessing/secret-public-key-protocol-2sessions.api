// Secret Public Key Protocol as decribed in Gong's paper (1993)
// Protecting Poorly Chosen Secrets from Guessing Attacks (page 12)

// A -> S: A, B
// S -> A: A, B, ns, {Ksa}Ka, {Ksb}Kb
// A -> B: {A, B, na1, na2, ca, {ns}Ka}Ksa, ns, ra, {Ksb}Kb
// B -> S:  {A, B, na1, na2, ca, {ns}Ka}Ksa,  {B, A, nb1, nb2, cb, {ns}Kb}Ksb
// S -> B: {na1, k + na2}Ka,  {nb1, k + nb2}Kb
// B -> A: {na1, k + na2}Ka, {f1(ra),rb}k
// A -> B: {f2(rb)}k


#set xor;

symbols  senc/2, sdec/2, pair/2, fst/1, snd/1, f1/1, f2/1, aenc/2, adec/2, pk/1, A/0, B/0;
private pwA, pwB, na1,na2, nb1,nb2, ra,rb, pfresh, sksa, sksb,ca,cb, ns,k;
channels CA, CB, CS, CA2, CB2, CS2;
var X, Y, X1, X2, X3,  Yns, Yra, Y2, Xk, Xrb, Yk, Z, Z1, Zna1, Zna2, Znb1, Znb2, Za, Zb, Z2,
 Xd, Yd, Xd1, Xd2, Xd3,  Ydns, Ydra, Yd2, Xdk, Xdrb, Ydk, Zd, Zd1, Zdna1, Zdna2, Zdnb1, Zdnb2, Zda, Zdb, Zd2;

rewrite adec(aenc(X,pk(Y)),Y) -> X;
rewrite senc(sdec(X,Y),Y) -> X;
rewrite sdec(senc(X,Y),Y) -> X;
rewrite fst(pair(X,Y)) -> X;
rewrite snd(pair(X,Y)) -> Y;
rewrite pair(fst(X),snd(X)) ->X;



// Role A slightly simplified

A1 =  in(CA,X1).out(CA,pair(aenc(pair(A,pair(B,pair(na1,pair(na2,pair(ca,senc(X1,pwA)))))),pk(sksa)),ra)).0;

A2 =  in(CA, X). let X2 = fst(X) in let X3 =snd(X) in [fst(sdec(X2,pwA)) = na1].
      let Xk = snd(sdec(X2,pwA)) + na2 in [fst(sdec(X3,Xk)) = f1(ra)]. let Xrb = snd(sdec(X3,Xk)) in
      out(CA,senc(f2(Xrb),Xk)).0;


// Role B slightly simplified

B = in(CB,Y).let Yns = fst(Y) in let Yra = snd(Y) in
     out(CB,aenc(pair(B,pair(A,pair(nb1,pair(nb2,pair(cb,senc(Yns,pwB)))))),pk(sksb))).
     in(CB,Y2) .  [fst(sdec(Y2,pwB)) = nb1].
     let Yk = snd(sdec(Y2,pwB)) + nb2 in out(CB, senc(pair(f1(Yra),rb), Yk)).0;
      

// Role S slightly simplifie
S = out(CS,ns).out(CS, senc(pk(sksa),pwA)).out(CS, senc(pk(sksb),pwB)).
    in(CS,Z). let Z1 = fst(Z) in let Z2 = snd(Z) in
              let Za = adec(Z1,sksa) in let Zb = adec(Z2,sksa) in
	      [fst(Za) = A].[fst(snd(Za)) = B].
              [fst(Zb) = B].[fst(snd(Zb)) = A].
	      [snd(snd(snd(snd(snd(Za))))) = senc(ns,pwA)]. [snd(snd(snd(snd(snd(Zb))))) = senc(ns,pwB)]. 
      let Zna1 = fst(snd(snd(Za))) in let Zna2 = fst(snd(snd(snd(Za)))) in
      let Znb1 = fst(snd(snd(Zb))) in let Znb2 = fst(snd(snd(snd(Zb)))) in
      out(CS, pair(senc(pair(Zna1,k+Zna2),pwA), senc(pair(Znb1,k+Znb2),pwB))).0;
	
// Role A slightly simplified

Ad1 =  in(CA2,Xd1).out(CA2,pair(aenc(pair(A,pair(B,pair(na1,pair(na2,pair(ca,senc(Xd1,pwA)))))),pk(sksa)),ra)).0;

Ad2 =  in(CA2, Xd). let Xd2 = fst(Xd) in let Xd3 =snd(Xd) in [fst(sdec(Xd2,pwA)) = na1].
      let Xdk = snd(sdec(Xd2,pwA)) + na2 in [fst(sdec(Xd3,Xdk)) = f1(ra)]. let Xdrb = snd(sdec(Xd3,Xdk)) in
      out(CA2,senc(f2(Xdrb),Xdk)).0;


// Role B slightly simplified

Bd = in(CB2,Yd).let Ydns = fst(Yd) in let Ydra = snd(Yd) in
     out(CB2,aenc(pair(B,pair(A,pair(nb1,pair(nb2,pair(cb,senc(Ydns,pwB)))))),pk(sksb))).
     in(CB2,Yd2) .  [fst(sdec(Yd2,pwB)) = nb1].
     let Ydk = snd(sdec(Yd2,pwB)) + nb2 in out(CB2, senc(pair(f1(Ydra),rb), Ydk)).0;
      

// Role S slightly simplified
Sd = out(CS2,ns).out(CS2, senc(pk(sksa),pwA)).out(CS2, senc(pk(sksb),pwB)).
    in(CS2,Zd). let Zd1 = fst(Zd) in let Zd2 = snd(Zd) in
              let Zda = adec(Zd1,sksa) in let Zdb = adec(Zd2,sksa) in
	      [fst(Zda) = A].[fst(snd(Zda)) = B].
              [fst(Zdb) = B].[fst(snd(Zdb)) = A].
	      [snd(snd(snd(snd(snd(Zda))))) = senc(ns,pwA)]. [snd(snd(snd(snd(snd(Zdb))))) = senc(ns,pwB)]. 
      let Zdna1 = fst(snd(snd(Zda))) in let Zdna2 = fst(snd(snd(snd(Zda)))) in
      let Zdnb1 = fst(snd(snd(Zdb))) in let Zdnb2 = fst(snd(snd(snd(Zdb)))) in
      out(CS2, pair(senc(pair(Zdna1,k+Zdna2),pwA), senc(pair(Zdnb1,k+Zdnb2),pwB))).0;


P = ((A1 :: A2) || B || S) >> ((Ad1 :: Ad2) || Bd || Sd) ;

PwA = (P >> out(CS,pwA));

Pfresh = (P >> out(CS,pfresh));

includedct? PwA in Pfresh;
