// Secret Public Key Protocol as decribed in Gong's paper (1993)
// Protecting Poorly Chosen Secrets from Guessing Attacks (page 12)

// A -> S: A, B
// S -> A: A, B, ns, {Ksa}Ka, {Ksb}Kb
// A -> B: {A, B, na1, na2, ca, {ns}Ka}Ksa, ns, ra, {Ksb}Kb
// B -> S:  {A, B, na1, na2, ca, {ns}Ka}Ksa,  {B, A, nb1, nb2, cb, {ns}Kb}Ksb
// S -> B: {na1, k + na2}Ka,  {nb1, k + nb2}Kb
// B -> A: {na1, k + na2}Ka, {f1(ra),rb}k
// A -> B: {f2(rb)}k


#set xor;

symbols  senc/2, sdec/2, pair/2, fst/1, snd/1, f1/1, f2/1, aenc/2, adec/2, pk/1, A/0, B/0;
private pwA, pwB, na1,na2, nb1,nb2, ra,rb, pfresh, sksa, sksb,ca,cb, ns,k;
channels C;
var X, Y, X1, X2, X3, X4, X5, X6, X7,X8;

rewrite adec(aenc(X,pk(Y)),Y) -> X;
rewrite senc(sdec(X,Y),Y) -> X;
rewrite sdec(senc(X,Y),Y) -> X;
rewrite fst(pair(X,Y)) -> X;
rewrite snd(pair(X,Y)) -> Y;
rewrite pair(fst(X),snd(X)) ->X; // surjective pairing

P =
  let X1 = pair(A,B) in out(C,X1).
  let X2 = pair(A,pair(B,pair(ns,pair(senc(pk(sksa),pwA),senc(pk(sksb),pwB))))) in out(C,X2).
  let X3 = aenc(pair(A,pair(B,pair(na1,pair(na2,pair(ca,senc(ns,pwA)))))),pk(sksa)) in out(C,pair(X3,pair(ns,pair(ra,senc(pk(sksb),pwB))))).
  let X4 = aenc(pair(B,pair(A,pair(nb1,pair(nb2,pair(cb,senc(ns,pwB)))))),pk(sksb)) in out(C,pair(X3,X4)).
  let X5 = senc(pair(na1, k+ na2),pwA) in let X6 = senc(pair(nb1, k+nb2),pwB) in out(C,pair(X5,X6)).
  let X7 = senc(pair(f1(ra),rb),k) in out(C,pair(X6,X7)).
  let X8 = senc(f2(rb),k) in out(C,X8).0;

	
PwA = (P >> out(C,pwA));

Pfresh = (P >> out(C,pfresh));

includedct? PwA in Pfresh;


// Note: they are not equivalent without surjective pairing

