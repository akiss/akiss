/* This is the EKE (Encrypted Key Exchange) protocol introduced by 
   Bellovin and Merritt in their paper "Encrypted Key Exchange: Password
   Based Protocols Secure Against Dictionary Attacks"

   The goal of the protocol is to escalate a (weak) password w shared
   between two parties to a (strong) encryption key r. The protocol
   proceeds informaly as follows:

   1. A -> B: senc(pk(k), w)                (fresh key k)
   2. B -> A: senc(aenc(r, pk(k)), w)
   3. A -> B: senc(na, r)                   (fresh nonce na)
   4. B -> A: senc(<na, nb>, r)             (fresh nonce nb)
   5. A -> B: senc(nb, r)                 
   
   The last three steps performs a handshake to prevent replay attacks.

   This file models and session of the prtocol and shows it is resistant
   against guessing attacks of w.
*/ 
symbols enc/2, dec/2, aenc/3, adec/2, pk/1, h/1, pair/2, fst/1, snd/1;

channels c, cab,cba;

private w, v, k, r, rb, na, nb;

var X, Y, Z, x1, x2, y1, y2;

rewrite dec(enc(X, Y), Y) -> X;
rewrite enc(dec(X, Y), Y) -> X;
rewrite adec(aenc(X, pk(Y), Z), Y) -> X;
rewrite fst(pair(X,Y)) -> X;
rewrite snd(pair(X,Y)) -> Y;


A = out(cab, enc(pk(k), w)).
    in(cba,x1).
    out(cab,enc(na, adec(dec(x1,w),k))).
    in(cba,x2).
    [fst(dec(x2, adec(dec(x1,w),k)))=na].
    out(cab,snd(dec(x2,adec(dec(x1,w),k)))).
    0;

B = in(cab, y1).
    out(cba, enc(aenc(r, dec(y1, w), rb), w)).
    in(cab, y2).
    out(cba, enc(pair(dec(y2,r),nb) ,r)).
    0;

P = A || B;

revealW = out(c, w).0;
revealV = out(c, v).0;

P1 =  P >> revealW;
P2 =  P >> revealV;


includedft? P1 in P2;

// equivalentft? P1 and P2;
